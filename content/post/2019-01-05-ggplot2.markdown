---
title: ggplot2
author: Hoas
date: '2019-01-05'
slug: ggplot2
description: "ggplot的一些笔记整理"
categories:
  - fragmentray
tags:
  - R
  - ggplot2
lastmod: '2019-01-05T13:04:48+08:00'
toc: yes
keywords: [ggplot2，笔记]
---

  There are brief notes about the usage of **ggplot2**.

## expression/annotate/Greek letters/title


```r
t <- seq(1,4,0.1)
qmp <- function(t) {
  0.278*(98.92/t^0.65-2)*78
}

q <- seq(500,2000,75)
tao <- function(q) {
  0.278*14.6/0.96/0.296/q^0.25
}

library(cowplot)
ggplot()+
  geom_smooth(mapping = aes(x = t, y = qmp(t)),color = "red")+
  geom_smooth(mapping = aes(x = tao(q), y = q),color = 'blue',linetype = "dashed",show.legend = TRUE)+
  labs(title = "9-2",x = expression(paste(tau, "(h)")),y = expression(Q[mp](m^3/s)))+
  theme(plot.title = element_text(hjust = 0.5))+
  background_grid(major = "xy")+
  annotate("text", x = c(1.5,2.6), y = c(1400,1500),
           label = c(expression(paste(Q[mp],"~",tau)),expression(paste(tau,'~',Q[mp]))))
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-1-1.png" width="672" />

  As you can see, the figure generated in HTML is clearer than in RStudio... But I don't know why.
  
  More expressions in R are available by calling `demo(plotmath)` or referring to  https://stat.ethz.ch/R-manual/R-devel/library/grDevices/html/plotmath.html.
  
  And more Greek letters used in R can be acquired by referring to http://kestrel.nmt.edu/~raymond/software/howtos/greekscape.xhtml.

## extra dashed lines


```r
library(readxl)
library(tidyverse)
library(cowplot)

a <- read_xlsx("E:/!大学/大三下/水资源开发利用/hw1/A.xlsx", sheet = 1)

x <- a %>%
  select(-1, -14) %>%
  as.matrix() %>%
  t() %>%
  as.vector() %>%
  ts(frequency = 12, start = c(1951, 1))

m <- 100; kk <- 600; m2 <- vector("numeric"); s <- vector("numeric", kk)
s[1] <- 0; d <- vector("numeric", kk); p <- vector("numeric")

v <- seq(0,150,5)

for (k in seq_along(v)) {
  m2[k] <- 0
  for (i in 1:kk) {
    if (x[i] + s[i] <= m) {
      d[i] <- s[i] + x[i]
      s[i + 1] <- 0
      m2[k] <- m2[k] + 1
    } else if (s[i] + x[i] <= m + v[k]) {
      d[i] <- m
      s[i + 1] <- s[i] + x[i] - m
    } else {
      d[i] <- s[i] + x[i] - v[k]
      s[i + 1] <- v[k]
    }
  }
  p[k] <- (kk - m2[k]) / (kk + 1) * 100
}

vp <- rbind(v,p) %>%
  t() %>%
  as_tibble()

ggplot(vp,mapping = aes(x = p, y = v)) +
  geom_point() +
  background_grid("xy") +
  labs(x = "P(%)", y = expression(V[兴](m^3/s%.%月))) +
  geom_vline(xintercept = 95, linetype = "dashed", color = "red") +
  geom_hline(yintercept = 46.5, linetype = "dashed", color = "red") +
  geom_smooth(se = FALSE)
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-2-1.png" width="672" />

## the legend


```r
m <- seq(50,500, 10); kk <- 600; m2 <- vector("numeric"); s <- vector("numeric", kk)
s[1] <- 0; d <- vector("numeric", kk); p <- vector("numeric")
v <- seq(200, 800, 100); mp <- tibble()

for(j in seq_along(v)){
  for (k in seq_along(m)) {
    m2[k] <- 0
    for (i in 1:kk) {
      if (x[i] + s[i] <= m[k]) {
        d[i] <- s[i] + x[i]
        s[i + 1] <- 0
        m2[k] <- m2[k] + 1
      } else if (s[i] + x[i] <= m[k] + v[j]) {
        d[i] <- m[k]
        s[i + 1] <- s[i] + x[i] - m[k]
      } else {
        d[i] <- s[i] + x[i] - v[j]
        s[i + 1] <- v[j]
      }
    }
    p[k] <- (kk - m2[k]) / (kk + 1) * 100
  }
  mp <- rbind(m,p,v=v[j]) %>%
    t() %>%
    rbind(mp) %>%
    as_tibble()
}

mp$v <- mp$v %>%
  as.factor()

title <- expression(V(m^3/s%.%month))

ggplot(mp, aes(x = p, y = m, color =v)) +
  geom_smooth(se = FALSE) +
  labs(x = "P(%)", y = expression(Q[p](m^3/s)), color = title) + 
  theme(legend.title = element_text(size=10))+
  background_grid(major = "xy")
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-3-1.png" width="672" />

Following shows how to break x-axis as you want:
```r
d1 <- data; d2 <- data2
tb <- cbind(d1,d2) %>%
  rename(中水年 = V12, 枯水年 = V2, month = V1) %>%
  melt(id="month")
library(cowplot)
ggplot(tb,aes(x = month,y = value, color = variable)) +
  geom_line()+
  geom_point()+
  labs(x = "月份", y = expression(出力/万kW)) +
  background_grid("xy")+
  scale_x_continuous(breaks=seq(0, 12, 2))+
  theme(legend.justification=c(1,1), legend.position=c(1,1),legend.title=element_blank())
```

When you meet with sequences of times and two or more sets of plot types, for example, `col` and `shape`:

```r
library(readxl)

final <- read_xlsx("E:\\!大学\\大三下\\水资源开发利用\\ks\\配线表\\设计洪水配线计算.xlsx",
                   sheet = 9, range = "A20:E35") %>%
  melt(id = "t")
final$t <- ymd(final$t)
final$variable <- str_replace(final$variable,"P.","P=")
final$variable <- str_replace(final$variable,"2.","2%")
ggplot(final,aes(x=t,y = value,color = variable,shape = variable))+
  geom_point()+
  ggalt::geom_xspline() + 
  # theme(axis.text.x = element_text(angle = 45)) + 
  scale_x_date(date_breaks = "3 day") + 
  # theme(legend.position = "none") +
  labs(title = "设计洪水过程线",x = expression(paste("时间", "(h)")),
       y = expression("流量"(m^3/s)),shape = expression("图例"),col = expression("图例"))+
  theme(plot.title = element_text(hjust = 0.5))+
  background_grid(major = "xy")
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-4-1.png" width="672" />

## double y-axis

[This method](http://www.10tiao.com/html/404/201808/2651058545/2.html) changes the second variable's value to fit the first y-axis, which plays a trick on the second y-axis.

```r
library(ggplot2)
library(ReadAxfBOM)

obs <- ReadAxfBOM("http://www.bom.gov.au/fwo/IDV60901/IDV60901.94866.axf")

p <- ggplot(obs, aes(x = Timestamp)) +
  geom_line(aes(y = air_temp, colour = "Tempeture")) +
  geom_line(aes(y = rel_hum, colour = "Humidity")) +
  scale_y_continuous(sec.axis = sec_axis(~., name = "Relative humidity [%]")) +
  scale_colour_manual(values = c("blue", "red")) +
  labs(y = "Air temperature [°C]", x = "Date and time", colour = "Parameter") +
  theme(legend.position = c(0.8, 0.9))
p
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-5-1.png" width="672" />

```r
q <- ggplot(obs, aes(x = Timestamp)) +
  geom_line(aes(y = air_temp, colour = "Tempeture")) +
  geom_line(aes(y = rel_hum/5, colour = "Humidity")) +
  scale_y_continuous(sec.axis = sec_axis(~.*5, name = "Relative humidity [%]")) +
  scale_colour_manual(values = c("blue", "red")) +
  labs(y = "Air temperature [°C]", x = "Date and time", colour = "Parameter") +
  theme(legend.position = c(0.8, 0.9))
q
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-5-2.png" width="672" />

And [this](https://cloud.tencent.com/developer/article/1093077) is a similar method using range:

```r
# lct <- Sys.getlocale("LC_TIME")  
#备份本地默认日期显示格式

# Sys.setlocale("LC_TIME", "C")    
#指定标准日期显示格式

# Sys.setlocale("LC_TIME",lct)     
#这一句是恢复默认系统日期显示格式
#（记得要在使用完下面的month函数之后再运行这一句，否则月份返回的是中文）

library("lubridate")
library("ggplot2")
library("scales")
library("magrittr")
library("tidyr")

data1 <- data.frame(
  Month = seq(from = as.Date('2017-01-01'),to=as.Date('2017-06-01'),by='1 month') %>% lubridate::month(label=TRUE),
  Value = runif(6,10,50) %>% round()
)

data2 <- data.frame(
  Month = seq(from = as.Date('2017-01-01'),to=as.Date('2017-06-01'),by='1 month') %>% lubridate::month(label=TRUE),
  Categroy1 = runif(6,0.1,0.5) %>% round(2),
  Categroy2 = runif(6,0.1,0.5) %>% round(2)
) %>% gather(Category,Value,-1)

ggplot() +
  geom_col( data = data1,aes(x = Month,y = Value),fill="#6794a7") +
  geom_line(data = data2,aes(x = Month,y = rescale(Value,c(0,55)),
                             colour=Category,group=Category),size=1.5) +
  geom_point(data = data2,aes(x = Month,y = rescale(Value,c(0,55)),
                              colour=Category),shape=21,fill="white",size=4)+
  scale_y_continuous(breaks=pretty_breaks(5),
                     sec.axis = sec_axis( ~rescale(.,c(0,0.5)),
                                          name = "Categroy",labels=sprintf("%d%%",(0:5)*10)))+
  scale_color_manual(label = c("Categroy1", "Categroy2"),values = c("#ee8f71","#C10534")) +
  labs(
    title="This is a Title!",
    subtitle="This is a Subtitle",
    caption="This is a Caption"
  )+
  theme_minimal(base_size=16) %+replace% 
  theme(
    plot.caption = element_text(hjust=0),
    plot.margin = unit(c(1,0.5,1,0.5), "lines")
  )
```

<img src="/post/2019-01-05-ggplot2_files/figure-html/unnamed-chunk-6-1.png" width="672" />

